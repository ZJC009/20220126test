<1>
class Point
{
	public:
		Point (int x1,int y1);
		~Point ();
	private:
		int x;
		int y;
}

Point::Point(int x1,int y1)
{
	x = x1;
	y = y1;
}
Point::~Point()
{
	x = 0;
	y = 0;
}

<2>
int main()
{
	int *p = new int(10);
    char* s = new char[100];
    delete p;
    delete[] s;
}

<3>
class Test
{
public:
    Test()
    {
        printf("Test\n");
    }
    ~Test()
    {
        printf("~Test\n");
    }
};
class Test2 : public Test
{
public:
    Test2()
    {
        printf("Test2\n");
    }
    ~Test2()
    {
        printf("~Test2\n");
    }
};
int main()
{
    Test2* t;
    t = new Test2();

    delete t;
    return 0;
}

<4>
template<typename T>
T Calc( T a, T b, int type)
{
    T ans = 0;
    switch(type)
    {
        case 0:
            ans = a + b;
            break;
        case 1:
            ans = a - b;
            break;
        case 2:
            ans = a * b;
            break;
        case 3:
            ans = a / b;
            break;
    }
    
    return ans;
}

int main()
{
    int ans1;
    float ans2;
    char ans3;
    
    ans1 = Calc<int>(2,5,0);
    ans2 = Calc<float>(10.0f,2.5f,3);
    ans3 = Calc<char>(10,4,2);
    
    return 0;
}

<5>
int main()
{
    std::list<int> lst;
    for( int i = 0; i < 5; ++i)
    {
        lst.push_back(60-(i + 1) * 10);
    }
 for( std::list<int>::const_iterator it = lst.begin(); it != lst.end(); ++it)
    {
		if (*it == 30)
			printf("num = %d\n", *it);
		else
			lst.erase(it);
    }
	
<6>
int main()
{
    std::vector<int> vec;
    for( int i = 0; i < 5; ++i)
    {
        vec.push_back(60-(i + 1) * 10);
    }
 for( std::vector<int>::const_iterator it = vec.begin(); it != vec.end(); ++it)
    {
		if (*it == 30)
			printf("num = %d\n", *it);
		else
			vec.erase(it);
    }
